// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package config

import (
	"errors"
	"fmt"
)

const (
	// DatabaseTypePsql is a DatabaseType of type psql.
	DatabaseTypePsql DatabaseType = "psql"
	// DatabaseTypeSqlite is a DatabaseType of type sqlite.
	DatabaseTypeSqlite DatabaseType = "sqlite"
)

var ErrInvalidDatabaseType = errors.New("not a valid DatabaseType")

// String implements the Stringer interface.
func (x DatabaseType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DatabaseType) IsValid() bool {
	_, err := ParseDatabaseType(string(x))
	return err == nil
}

var _DatabaseTypeValue = map[string]DatabaseType{
	"psql":   DatabaseTypePsql,
	"sqlite": DatabaseTypeSqlite,
}

// ParseDatabaseType attempts to convert a string to a DatabaseType.
func ParseDatabaseType(name string) (DatabaseType, error) {
	if x, ok := _DatabaseTypeValue[name]; ok {
		return x, nil
	}
	return DatabaseType(""), fmt.Errorf("%s is %w", name, ErrInvalidDatabaseType)
}
